# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rake db:seed (or created alongside the db with db:setup).
#
# Examples:
#
#   cities = City.create([{ name: 'Chicago' }, { name: 'Copenhagen' }])
#   Mayor.create(name: 'Emanuel', city: cities.first)

User.create(name: "Nick Brown")

BlogPost.create(user_id: 1, title: "Fireside Chat Response Blog", text: "That video actually made me feel a lot better about getting to DevBootCamp. That last couple of days have been a little stressful for me. Trying to finish Week One in one and a half days on little sleep has been rough on me, but the fear that I have been feeling is exactly what Shereef talked about in the video. I am worried that tomorrow someone is going to look at my half-baked blog and say, this person doesn't belong here, it looks like he barely knows CSS at all. Which is true, because I do. But I am learning it, and I am honestly excited to keep learning it, and to get that comfortable feeling that comes from understanding the basics well enough to innovate with them and make something really fun. Learning something new always comes with anxieties, this happens to be a program where I feel like there a ton of expectations on me already and that can be scary. But it's a long process and we are just beginning it together, and it is going to be fun.")

BlogPost.create(user_id: 1, title: "The Difference Between Relative, Absolute and Fixed Positioning", text: "The difference between Relative and Absolute positioning can be a littl bit difficult to grasp. If we keep the DOM (Document Object Model) in mind though, the rules that divide these two classes become easier to understand.
The DOM is a map, put simply, that keeps track of each elements parent element and all of its children. For example, the html tag is the parent of every page, and the body tag is a common child within html. Then there might be some text in paragraphs, or p tags, that are contained by the body tag. The DOM is the schematic that lets us see that body's parent is html, and its children are the paragraphs.
Now why is this important for positioning?
Elements in a browser are displayed in relation to the elements around them, and are affected by their position in the DOM. If you don't know what the parent is of the element you are trying to position, then you will struggle to make it go where you want it to.
Absolute positioning is a great example of how knowing your parent element is key to good code. It displays your object relation to placement of its parent element. Picture that you have two squares on your page, a large square and a smaller square. If the smaller square has absolute positioning, then it will naturally fall inside the top left corner of the larger square. It's original position will be determined by the location of its parent element. Do you see why keeping track of the DOM is important now?
Now I cheated in that last example, because I made an assumption about the larger square. Imagine that there were actually three squares of escalating size, and the second square also has absolute positioning. The third square would not be positioned based off the middle square, because elements with absolute positioning do not interact positionaly with any elements except for their parents. That means that both of the smaller squares would be positioned based off of the largest square, assuming that it has Relative positioning.
That right there is the key difference betwen absolute and relative conditioning: Relative elements interact with their children and other siblings. Absolute elements only interact with their parents, and can not be positioned off of.
Think of relative elements as a cork board that can have absolute elements pinned to it.
Fixed positioning is simpler. Fixed elements behave like absolute elements, holding a certain position in relation to a parent. The difference is that fixed elements are always reacting to the html parent, and hold their place no matter what you are doing to the page. Picture a website with a box on the bottom left hadn corner. Now imagine that you are scrolling up and down the page and the box is staying in the exact same spot. That's how a fixed element works.")

BlogPost.create(user_id: 1, title: "When to Use Javascript", text: "So the sites that I researched all had sort of the same thing to say about Javascript. The agreed upon thesis was this: that Javascript and its usage can be determined by its one defining characteristic.
This characteristic is that Javascript is an incredibly dynamic language, capable of performing many different tasks. It can be used to style a website instead of CSS, create interactive content or validate forms. However, it should only be used when another language will not suffice.
To wit, CSS will do a better and easier to understand job of styling a website, and their are better ways to validate forms in HTML as well. Javascript is excellent for accomplishing tasks that cannot be done in any other language, and therein lies the usefullness of the language. It is so open-ended that it can accomplish what other languages cannot. That being said, the open-endedness causes the language to be a bit unwieldy and difficult to use, which is why when another language can do the trick, it should be allowed to. Javascript is like the last resort tool in the Developer's toolkit. When nothing else can do th job, Javascript can find a way.")

BlogPost.create(user_id: 1, title: "My Thinking Style", text: "My journey through the DBC prep-work up to this point has not been the most fluid of journeys. I started the firt week late, barely finished the next day, and have not managed to turn in a single one of my weeks in on time. Strangely, I feel completely confident in my abilities as an aspiring programmer despite these mistakes. I am no totally confident in my ability to code in HTML and CSS, and have actually started to enjoy the puzzle-like atmosphere that walks hand-in-hand with coding. Javascript I still feel like I am just beginning to learn, but the open-ended nature of the language is intriguing to me.
When I look at my results from the Gregorc Thinking Style quiz after these first three weeks, I can see reflected in those characteristics the reason for some of my struggles and successes. I was defined as both a Concrete Random thinker, and an Abstract Random thinker, emphasis on the Abstract. Neither of these definitions surprised me, I have alwaya thrived in person-to-person environments where I can talk to somebody in the flesh, and have also always liked to learn through experimentation. Learning through experimentation lends itself really well to CSS, where it is easier to try a bunch of things and learn from your mistakes than conceptually visualize all the display and positioning properties in your head.
That being said, the fact that I enjoy face-to-face conversation much more than internet interactions has caused me a lot of trouble so far in this course. I don't like reaching out for help over the internet, which makes me a little more shy about contacting my cohort and others when I have problems with my code, and even reaching out to my advisor. It has also held me back in pairing, because I have been shy about asking or accepting pairing requests from my cohort-mates.
I've decided that I can't let that get in the way of my learning any longer, and I have made a pact with myself to be more proactive earlier in the week about pairing with others and commiting to those appointments. I need to take my face-to-face skills and translate them into screen-to-screen skills if I want to succeed in this program, and I do want that very much. Part of having a growth mindset is accepting where you have fallen down and looking into that area for improvement. In this next month I will be more proactive in getting pairing, and better at getting my voice heard in those sessions, and I won't accept the Monday after the deadline to finalize my work. I've got a lot of coding left to do, and the time to start making little good habits is now. Here we go unit two!")

BlogPost.create(user_id: 1, title: "Problems in the Tech World", text: "So after some research online it would appear that there is an overwhelming consensus that the most pressing issue facing the tech industry today is a lack of representative diversity. Women hold a proportionally small percentage of tech jobs (about 25 %) and are unusually likely to quit those jobs. The first site that I looked at had a truly bizarre story about an app called Titstare (if you know why someone would need an app for that, let me know) that led to some firings, and some quittings, and then eventually some progress in recognizing the apparent mysoginies that are rampant in the tech industry. The nest story I read was about people making a 'dongle' joke, and a tweet about that joke that led to, again, a lot of firings and twitter rage that should never have been necessary.
So the tech industry clearly has a problem with diversity, specifically gender diversity. There does not seem to be much argument against that fact. The progress towards solving this problem seems to be slow, but removing bias from a group is generally a ponderous and painful procedure. Change in these areas is not like a surgery, where there is a single problematic bit that can be removed and discarded. It is a violent antibiotic that must be administered to every part of the body, even (maybe especially) those who do not think they need it. I do not know what I can do personally to help women in the industry, I am very new to the problem and do not fully grasp the reality of the situation, and frankly I have never been much of an acitivist. I try to live and act in a way that I would like to see others do, and speak up when I see something wrong. I am certain that in time more can be done, and the nature of that change will reveal itself.")

BlogPost.create(user_id: 1, title: "Some Information on Methods and Objects in Ruby", text: "So the ruby method that I decided to look up is the Enumerable#cycly method. This seems like a very useful method, and although I took the time (and am glad that I did) to look at all of the methods, #cycle is the one that I can see myself using the most frequently.
So enumerable methods are loop statements that ruby has short-cutted into the code, to put things plainly. This prevents us from living like Javascript people who have to write all of their methods out, over and over again. How sad for them. In ruby, we have methods that loop already written and ready to use, and #cycle is one of those lovely methods.
Now on to what it actually does. It is a method that is meant to be called on an array, and simply put it will perform a block of code on each value in that array as many times as you ask it to. It is basically a shortcut for writing a #times method combined with an #each method. Quite handy, as I have written methods using that unwieldy combination before. You can tell the code to do anything to these variables, from simply stating them to performing math or whatever else you like code to do. The point is, it is a quicker and cleaner way to do fun loops of code, and for that, Ruby, we thank you.")

BlogPost.create(user_id: 1, title: "Ruby Classes", text: "So I suppose in my limited experience with classes the best way to describe them would be to talk about when you would use them. A class is a useful bit of code to have around if you are trying to group a series of methods, objects and variables together all under one heading, so that you can re-use them on appropirate objects.
An example would be a good idea here, for clarification's sake. Let's say that you are writing code that manipulates paragraphs, turns them into pig-latin. This is just one part of your code, and you are doing incredible, interesting things with your pig-latin phrases later, but you want a way to group all of your pig-latin phrases together so that you can call all of the same important pig-latin phrases on them. A class would be an awesome, totally appropriate way to do that.")

BlogPost.create(user_id: 1, title: "Pairing", text: "Pairing with others is always a bit of a nerve-racking experience. At least the build up to the pairing session is, especially. Almost all of the pairing sessions that I have been in have ended u being really enjoyable and educational experiences. Not only is it great to see somebode else's code and to learn technically from them, but it is also very helpful to have to explain yourself and your line of thought out loud. It can be incredibly difficult, to bridge what you are thinking to what you are saying but the process of clarifying those thoughts has been super helpful to me. I had one frustrating pairing session where I didn't feel that I was really able to express myself and get my ideas across to my partner, but aside from that one they have all been really helpful, and the people that I have met in the sessions have been extremely nice.
Reading my feedback was wonderful, I was really happy to see that a lot of people had really nice things to say about me. It isn't super constructive, I think that just from reading hte feedback that I have gotten and the feedback that I have rated people are more concerned with being kind than actionable. This is admirable in one sense, the sense that it is important to bouy the confidence and spirits of your fellow classmates, but I wish there were more people trying to really help each other learn in their comments. It is a trap that I have felt myslef falling into at times as well.
Pairing is in my opinion one of the most imporant parts of this prep experience, and I am excited to do more of it.")

BlogPost.create(user_id: 1, title: "Object Oriented Programming", text: "So this post is going to be on the difference between object oriented programming and procedural programming. The best place to start with this description should be with procedural programming, because it is the easiest to understand
Procedural programming is basically programming to accomplish a task, point a to point b simple as that. It's like you need a loop, you write the loop, and there the code works you call it a day go home and drink some iced tea. And it totally works, which is great but not as great as...
Object Oriented programming! Imagine that code that you wrote, and how long it took you to make. Let's say it was a complicated loop, and you aren't the best programmer, so it took you an hour. That means that with the rest of your day, you had one less hour to spend drinking iced tea. Which is a shame, because you love iced tea. Object Oriented Programming is a shortcut so that you can drink that iced tea faster.
Now I don't want to be misunderstood here, Object Oriented Programming (OOP) does not allow you to write the same code faster. That loop that took you an hour to write before will still take you an hour to write in OOP. The difference, and what is really cook about OOP is that you can use that code that took you an hour and re-use it over and over on all kinds of fun objects and in classes until it makes you sick. Which means that over the course of your programming life, you will have much more time in the long run to drink iced tea.
More pracitcally, imagine a very large program, and then imagine that you are for whatever reason writing this very large program. This program is going to work on a lot of similar data structures, and need to re-use functions many times. Now, you can use Procedural Programming, and write code until you are an old, sad man while your friends all die off away from you because you were coding all the time. That's an option that you have. OR, and I recommend this highly, you can use OOP to create classes and modules and re-use lots of your code over and over and save tons of time and drink iced tea with your friends all day long and laugh at Gary who is still doing his Procedural Programming in the corner. Silly Gary.
So that is the long and the short of why you should use OOP. To save tons of time, write tighter, cooler looking code that you can impress your friends with, and not be like Gary. Don't be like Gary, use OOP.")

BlogPost.create(user_id: 1, title: "Stereotype Threat", text: "I'll start this bog post by discussing exactly what stereotype threat is. Stereotype threat is when an individual performs below their capabilities based on thier expectations or fears of fulfilling pre-existing sterotypes. This means that because a person has been told that their race or ethnicity is worse at something, they are predisposed to act subconciously in a way that complies to that expectation. It has been verified in some scientific studies, and is a difficult and emotional issue for many.
I have not really experienced much stereotype threat in my life. I was born Jewish, and even though I don't consider myslef religious in any fashion I still call myself a Jew. Judaism for me is a cultural identity, a lifestyle and a set of values that were instilled in me as a child and have absolutely nothing to do with any kind of faith or theology. What that rambling statement boils down to is that I consider myself a Jew by my own terms, and have always identified as such.
Now I was raised in a nice neighborhood, in schools and camps that had lots of other Jewish children, so I never really felt like much of an outsider. I would hear comments now in then, meant to be innocuous. Things like, 'You don't look Jewish', or, 'Wait, so you don't eat bacon, right?'. These never really got to me, none of them have ever been malicious, and nobody has ever tried to insult me with my heritage. Past the occasional joke when I grab a quarter off the floor, being Jewish doesn't really have much of an effect on my daily life. For the most part, I encourage people to joke about my heritage, and to be comfortable pointing out when I or other Jews among our friends are affirming stereotyeps. I think that by laughing and openly discussing stereotypes, we take the power away from them. I understand however that this is partly a privelege born from being in a society where my race isn't truly considered a threat or disadvantage. It isn't this way for Jews around the world, and it certainly isn't this way for most other minorities. Openness and direct honesty are a large part of my beliefs in any aspect of my life, and I see no reason why stereotype threat should be treated any differently. If people are open and honest about what they are comfortable (and uncomfortable) with, then I think they are more likely to get the treatment that they prefer.
Addressing the mechanisms of social change on a large scale is a dubious proposition any time, but I do truly believe in small personal changes. There is a Jewish saying from Rabbi Hillel that goes, 'Do unto others as you would have others do unto you.' This is the way that I try to impact people's views around me, by acting the way that I would like to see others act and by being open with them and with myself.")

BlogPost.create(user_id: 1, title: "SQL Injection", text: "So what exactly is SQL Injection? It is the intentional or unintentional insertion of harmful or incorrect data into SQL tables. Simply put, it is putting bad data into tables. This can happen accidentally, but the term Injection is more commonly used to refer to the intentional use of misinformation by hackers to either disrupt, delete or steal data.
So what can young Johnny Programmer do to combat this evil? Well there are a couple of options that I found, including Escaping, Pattern Checking and using Database Permissions.
Escaping is simple enough. Basicaaly you tell SQL to Escape (or remove) any characters that have special meaning in SQL. So words that would DROP or SELECT data don't have their usual effect.
Pattern Checking is a little more comprehensive of a solution, basically incoming strings will be checked to see if they match certain acceptable or problematic patterns. This allows for a wider range of possibilities in prevention.
Finally, Database Permissions are used to deny access to individuals using SQL statements. This can also help prevent hackers from expoliting bugs to steal or corrupt data.
From what I read, SQL Injection is a serious problem, and even though XKCD makes light of it I am sure that many people take it much more seriously. Programming is frought with people who look to steal, cheat or otherwise destroy the work of others. Mybrother works in programming securities, so I know a little about it. So long as the people working to stop the hackers are smarter than the hackers themselves, most of us have nothing to worry about. That being said, it is always a good reminder when you think about how fragile the data that you share iwth the internet is, and how careful you need to be with yoru private information.")

BlogPost.create(user_id: 1, title: "Values", text: "Will power is the word that stood out to me the most in that collection of values. Will power is important to me because it radiates positively through every other aspect of life. I believe that anything can be accomplished if I put enough energy, focus and will into it, and acheiving that kind of effort is something that I work on improving every day. I chose it in relationship to the happiest moments in my life because I am happiest when I am accomplishing any task that pushes the boundaries of my capabilities. That's part of why I enjoy DBC so much, almost every challenge pushes me to be cleverer and more focused than I have been in a long time.
I struggle alot at self-motivating. When I am on my own, I find it all to easy to sit around and waste time on espn, or playing destiny, or hanging out with friends. I need structure in my life to stay focused and motivated, and it took me a long time to realize that. DBC has already been very helpful in that regard, the weekly challenges have sparked some order back into my life that has been missing since college. Overall I would give myself a 3 on the 1 - 5 scale. I choose three because when I am motivated, I am one-hundred percent commited, but when that will power fades I can be incredibly lazy and disinterested. My interest level wanes occasionally when a subject stops being new, and sustaining that initial interest and drive is something that I work on every day. DBC has sustained my interest really well so far, and I believe that programming is dynamic and challenging in a way that will help me stay happy and focused on it for a long time.
Ont to advice. The literal last time someone asked me for advice (chronologically) was about Fantasy Football. I get a lot of those, my friends know that I take fantasy pretty seriously. The last serious discussion I had with someone was about his parents. My parents are going through a divorce, and his parents are having some troubles too and we just talked about realizing that your parents are flawed people too, and that sometimes you need to take care of them as well. Family issues are always difficult, but I think we agreed in that talk that it's healthy to stop thinking of your parents as ideas and start thinking of them as people, as older versions of ourselves. It's healthier in the long run, and it really opens your perspective on them.")

BlogPost.create(user_id: 1, title: "Asking Questions About Code", text: "The first time I had to ask someone a question about code was during my application process into programming boot camps. I am particularly fortunate to have access to my brother as a resource (he has a CS masters) and I wanted the answer to a Javascript problem. It was a simple problem, I had forgotten the 'return' statement and my code was coming up empty because of it. I asked my brother for the answer, and he said no. Then he spent the next thrity minutes walking my paitently through my code until I saw that I was missign the 'return' statement, fixed my code and solved the challenge.
At first I was mad at him, he knew what the answer was and could have saved us both a not inconsiderable amount of time. But I realized that he had taught me a lesson about coding that was much more valuable than the answer to a simple Javascript challenge. He explained that coding is a frustrating line of work to get into, but that taking the easy answer instead of following through until you understand the answer was never the way to go. It is better to sweat over the code for an hour until you really understand your problem than to have somebody else copy/paste the answer in for you, because in the latter situation you don't learn anything.
I am lucky (again) to be in a program where I will have access to brilliant, helpful people all the time, people who know a lot about code and could almost certainly write all of the code I need to get through my challenges. What I want from these people isn't the answer to coding problems, it's advice in how to best find the answer. What I got from my brother in that half hour was a better understanding of my code and how to troubleshoot it, and that is well worth the time it took, and that is exactly the kind of help that I would ask for at DBC.")

Project.create(user_id: 1, title: "PairBnB", description: "PairBnB is a social platform for programmers who are looking to network with, teach, learn from and  host like-minded individuals (think Couchsurfing + AirBnB + Programming).

Users can sign up, find other programmers in cities around the country, message each other, and request to pair-program on projects of their choice. In exchange for technical assistance, hosts can offer places to stay for users coming from out of town.

PairBnB was built with Ruby on Rails, Bootstrap, and JavaScript (JQuery, AJAX).", link: "http://pairbnb.org")

Project.create(user_id: 1, title: "Stack Overlord", description: "Stack Overlord is a Ruby Gem that searches your ruby file for errors upon being run and returns top search results from Stack Overflow and the Ruby Docs that match your error message and classification.", link: "https://rubygems.org/gems/stack_overlord")
